openapi: 3.0.0
info:
  title: API UP ACEA
  description: '-----'
  version: 1.0.0
servers:
- url: https://virtserver.swaggerhub.com/gtaffon/SimpleAPI/1.0.0
  description: SwaggerHub API Auto Mocking
tags:
- name: ODM
  description: All the info about the ODM
- name: RGDM
  description: All the info's about the RGDM
- name: UP
  description: All the info about the UP
- name: UP-SETTINGS
  description: all the settings about the Up
- name: UP-SIMULATOR
  description: all the apis about the simulator of the up
paths:
  /up/stms:
    get:
      tags:
      - UP
      summary: return the connection stats with the stm
      description: return the actual connection stats with the stm
      operationId: getStmStats
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NetStmStatsResponse'
              examples:
                netStmExample:
                  $ref: '#/components/examples/netStmStatsExample'
        "404":
          description: Not found
          content: {}
    post:
      tags:
      - UP-SETTINGS
      - UP
      summary: configures the ip of the stm connected to the up
      description: create a new server
      operationId: setStm
      requestBody:
        description: send the value for the settings of the communication between
          ip and stm
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NetStmServerRequest'
      responses:
        "200":
          description: successfull operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NetStmServerResponse'
              examples:
                netStmExample:
                  $ref: '#/components/examples/netStmServerExample'
        "405":
          description: Invalid input
          content: {}
  /up/stms/{idStm}:
    get:
      tags:
      - UP
      summary: returns the configuration for the selected stm
      description: return the complete stm configuration for the selected idStm
      operationId: getStm
      parameters:
      - name: idStm
        in: path
        description: ID of net stm server to return
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NetStmServerResponse'
              examples:
                netStmExample:
                  $ref: '#/components/examples/netStmServerExample'
        "404":
          description: Not found
          content: {}
    put:
      tags:
      - UP
      summary: change the settings for the specific stm
      description: update the settings for the specific stm selected by the id
      operationId: updStm
      parameters:
      - name: idStm
        in: path
        description: ID of net stm server to return
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      requestBody:
        description: send the value for the simulation
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/NetStmServerRequest'
        required: true
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NetStmServerResponse'
              examples:
                netStmExample:
                  $ref: '#/components/examples/netStmServerExample'
        "404":
          description: Not found
          content: {}
    delete:
      tags:
      - UP
      summary: delete the selected stm's configuration from the system
      description: delete the configuration of the stm selected by the ip
      operationId: delStm
      parameters:
      - name: idStm
        in: path
        description: ID of net stm server to return
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: Successful Input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
              examples:
                ok:
                  $ref: '#/components/examples/apiResponseOK'
        "405":
          description: Invalid input
          content: {}
        "404":
          description: Not found
          content: {}
  /up/goose:
    put:
      tags:
      - UP-SETTINGS
      summary: configures the minimal goose service
      description: send an array of properties for the goose plugin
      operationId: setGoose
      requestBody:
        description: send the value for the settings of the communication between
          ip and stm
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GOOSE'
            examples:
              gooseSettingsExample:
                $ref: '#/components/examples/gooseSettingsExample'
      responses:
        "200":
          description: successfull operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
              examples:
                ok:
                  $ref: '#/components/examples/apiResponseOK'
        "405":
          description: Invalid input
          content: {}
    post:
      tags:
      - UP-SETTINGS
      summary: send the commands for the goose plugin
      description: send an array of commands to the goose plugin
      operationId: sendCommandGoose
      requestBody:
        description: send "ACTIVATE" OR "DEACTIVATE" to start an stop the plugin
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/GooseCommands'
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
              examples:
                ok:
                  $ref: '#/components/examples/apiResponseOK'
        "405":
          description: Invalid input
          content: {}
  /up/network:
    post:
      tags:
      - UP-SETTINGS
      summary: configure the network service and interface of the up
      description: send an array of properties for the up network setup
      operationId: setNetUp
      requestBody:
        description: send an array for configure the net Interface. At the voice "name"
          you must write the name of the interface -> ETH0 / ETH1 / WLAN0
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Network'
            examples:
              networkRequestExample:
                $ref: '#/components/examples/networkRequestExample'
      responses:
        "200":
          description: successfull operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
              examples:
                ok:
                  $ref: '#/components/examples/apiResponseOK'
        "405":
          description: Invalid input
          content: {}
  /up/stms/connections:
    get:
      tags:
      - UP
      summary: return the status of the active connections with the stm
      description: return the status of the active connection with the stm
      operationId: calledStm
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NetStmConnectionListResponse'
              examples:
                netStmConnectionListExample:
                  $ref: '#/components/examples/netStmConnectionListExample'
        "404":
          description: Not found
          content: {}
  /up/odms:
    get:
      tags:
      - ODM
      summary: return the list of the connected odms
      description: return the full list of the connected odms with the relative properties
      operationId: getAllOdm
      parameters:
      - name: pageNum
        in: query
        description: The page number of items to collect; this means that the offset
          of items to skip is (pageNum - 1) * pageLimit; a negative or 0 offset means
          no pagination.
        required: false
        style: form
        explode: true
        schema:
          type: integer
      - name: pageLimit
        in: query
        description: The numbers of items to return in the page; a negative limit
          means no limit.
        required: false
        style: form
        explode: true
        schema:
          type: integer
          default: -1
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OdmListResponse'
              examples:
                odmListResponseExample1:
                  $ref: '#/components/examples/odmListResponseExample1'
    post:
      tags:
      - ODM
      summary: add an odm to the system
      description: add a single odm with the parameters added in input
      operationId: addOdm
      requestBody:
        description: add an odm to the platform
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OdmRequest'
      responses:
        "200":
          description: Successful Input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OdmResponse'
              examples:
                odmResponseExample1:
                  $ref: '#/components/examples/odmResponseExample1'
        "405":
          description: Invalid input
          content: {}
      x-codegen-request-body-name: body
  /up/odms/{idOdm}:
    get:
      tags:
      - ODM
      summary: return the statistics fot the single odm
      description: return the statistics fot the single odm
      operationId: getOdm
      parameters:
      - name: idOdm
        in: path
        description: ID of odm to return
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OdmResponse'
              examples:
                odmResponseExample1:
                  $ref: '#/components/examples/odmResponseExample1'
        "400":
          description: Invalid ID supplied
          content: {}
        "404":
          description: Odm not found
          content: {}
      x-codegen-request-body-name: body
    delete:
      tags:
      - ODM
      summary: remove an odm
      description: remove the selected odm from the system
      operationId: delOdm
      parameters:
      - name: idOdm
        in: path
        description: ID of odm to return
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: Successful Input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
              examples:
                ok:
                  $ref: '#/components/examples/apiResponseOK'
        "405":
          description: Invalid input
          content: {}
    x-codegen-request-body-name: body
  /up-simulator/odms/{idOdm}:
    put:
      tags:
      - UP-SIMULATOR
      - ODM
      summary: Simulate current and voltage for the selected Odm
      description: Set the parameters to simulate the current and voltage for a specific
        odm
      operationId: simulOdm
      parameters:
      - name: domain
        in: path
        description: ID of odm to return
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/Domain'
      - name: idOdm
        in: path
        description: id of the odm
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: send the value for the simulation
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/SimulPhase'
        required: true
      responses:
        "200":
          description: Successful Input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
              examples:
                ok:
                  $ref: '#/components/examples/apiResponseOK'
        "400":
          description: invalid data
          content: {}
        "404":
          description: odm not found
          content: {}
        "405":
          description: Invalid input
          content: {}
    post:
      tags:
      - UP-SIMULATOR
      - ODM
      summary: commands to send to the breaker
      operationId: sendCommand
      parameters:
      - name: domain
        in: path
        description: ID of odm to return
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/Domain'
      - name: idOdm
        in: path
        description: ID of odm to return
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      requestBody:
        description: Commands to send -> OPEN / CLOSE / RESET
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/CommandType'
        required: true
      responses:
        "200":
          description: Successful Input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OdmResponse'
              examples:
                odmResponseExample1:
                  $ref: '#/components/examples/odmResponseExample1'
        "405":
          description: Invalid input
          content: {}
  /rgdms:
    get:
      tags:
      - RGDM
      summary: returns all the rgdm attached to the system
      operationId: getAllRgdm
      parameters:
      - name: pageNum
        in: query
        description: The page number of items to collect; this means that the offset
          of items to skip is (pageNum - 1) * pageLimit; a negative or 0 offset means
          no pagination.
        required: false
        style: form
        explode: true
        schema:
          type: integer
      - name: pageLimit
        in: query
        description: The numbers of items to return in the page; a negative limit
          means no limit.
        required: false
        style: form
        explode: true
        schema:
          type: integer
          default: -1
      responses:
        "200":
          description: Successfull Input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RgdmListResponse'
              examples:
                rgdmListResponseExample1:
                  $ref: '#/components/examples/rgdmListResponseExample1'
    post:
      tags:
      - RGDM
      summary: add an rgdm to the system
      operationId: addRgdm
      requestBody:
        description: add an RGDM to the platform
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RgdmRequest'
      responses:
        "200":
          description: Successful Input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RgdmResponse'
              examples:
                rgdmResponseExample1:
                  $ref: '#/components/examples/rgdmResponseExample1'
        "405":
          description: Invalid input
          content: {}
  /rgdms/{idRgdm}:
    get:
      tags:
      - RGDM
      summary: return the info for the selected rgdm
      description: return the info for the selected rgdm
      operationId: getRgdm
      parameters:
      - name: idRgdm
        in: path
        description: ID of rgdm to return
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RgdmResponse'
              examples:
                response1:
                  $ref: '#/components/examples/rgdmResponseExample1'
        "400":
          description: Invalid ID supplied
          content: {}
        "404":
          description: Rgdm not found
          content: {}
    post:
      tags:
      - RGDM
      summary: simulate the send of the command
      description: simulate the send of the command on a specific rgdm in the domain
        of the medium or low voltage
      operationId: sendCommandRgdm
      parameters:
      - name: idRgdm
        in: path
        description: ID of rgdm to return
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      requestBody:
        description: Possible commands to send -> remoteTrip / remoteClose
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/RgdmAction'
      responses:
        "200":
          description: Successful Input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RgdmResponse'
              examples:
                rgdmResponseExample1:
                  $ref: '#/components/examples/rgdmResponseExample1'
        "405":
          description: Invalid input
          content: {}
    delete:
      tags:
      - RGDM
      summary: delete the selected rgdm by id from the system
      description: delete the selected rgdm by the system
      operationId: delRgdm
      parameters:
      - name: idRgdm
        in: path
        description: ID of rgdm to return
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: Successful Input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
              examples:
                ok:
                  $ref: '#/components/examples/apiResponseOK'
        "400":
          description: Invalid ID
          content: {}
        "404":
          description: Rgdm not found
          content: {}
        "405":
          description: Invalid input
          content: {}
components:
  schemas:
    RgdmType:
      type: string
      enum:
      - RGDAT
      - RGDM
    Domain:
      type: string
      enum:
      - bt
      - mt
    SimulPhase:
      type: object
      properties:
        P1:
          type: integer
          format: int32
        P2:
          type: integer
          format: int32
        P3:
          type: integer
          format: int32
    CommandType:
      type: string
      enum:
      - OPEN
      - CLOSE
      - RESET
    GooseCommands:
      type: string
      enum:
      - ACTIVATE
      - DEACTIVATE
    Measure:
      type: object
      properties:
        ts:
          type: integer
          description: timestamp (long int)
          format: int32
        name:
          type: string
        type:
          type: string
        value:
          type: object
    Alarm:
      type: object
      properties:
        ts:
          type: integer
          description: timestamp (long int)
          format: int32
        name:
          type: string
        type:
          type: string
        value:
          type: object
        priority:
          type: integer
        code:
          type: string
          description: the alarm code
    Status:
      type: object
      properties:
        ts:
          type: integer
          description: timestamp (long int)
          format: int32
        name:
          type: string
        type:
          type: string
        value:
          type: object
      description: aka event
    OdmDetail:
      required:
      - modelName
      - name
      - tipology
      - vendorName
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        tipology:
          $ref: '#/components/schemas/Domain'
        modelId:
          type: string
        modelName:
          type: string
        vendorName:
          type: string
        enabled:
          type: boolean
        alarmChannel:
          type: string
          description: channel to retrieve the alarm in real time
        alarms:
          type: array
          items:
            $ref: '#/components/schemas/Alarm'
        measurementChannel:
          type: string
          description: channel to retrieve the data in real time
        measurements:
          type: array
          items:
            $ref: '#/components/schemas/Measure'
        statuses:
          type: array
          description: the array of events
          items:
            $ref: '#/components/schemas/Status'
    RgdmDetail:
      required:
      - modelName
      - name
      - tipology
      - vendorName
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        tipology:
          $ref: '#/components/schemas/RgdmType'
        modelId:
          type: string
        modelName:
          type: string
        vendorName:
          type: string
        enabled:
          type: boolean
        alarmChannel:
          type: string
          description: channel to retrieve the alarm in real time
        alarms:
          type: array
          items:
            $ref: '#/components/schemas/Alarm'
        measurementChannel:
          type: string
          description: channel to retrieve the data in real time
        measurements:
          type: array
          items:
            $ref: '#/components/schemas/Measure'
        statuses:
          type: array
          description: the array of events
          items:
            $ref: '#/components/schemas/Status'
    OdmMTDetail:
      properties:
        physicalAddress:
          type: integer
          description: short int
          format: int32
      description: cable config settings
      allOf:
      - $ref: '#/components/schemas/OdmDetail'
      - type: object
    OdmBTDetail:
      properties:
        serialPort:
          type: string
      description: modbus config settings
      allOf:
      - $ref: '#/components/schemas/OdmDetail'
      - type: object
    Odm:
      required:
      - modelName
      - name
      - tipology
      - vendorName
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        tipology:
          $ref: '#/components/schemas/Domain'
        modelName:
          type: string
        vendorName:
          type: string
        enabled:
          type: boolean
        statuses:
          type: array
          items:
            $ref: '#/components/schemas/Status'
        phases:
          type: array
          items:
            $ref: '#/components/schemas/Measure'
      description: odm light infos
    Rgdm:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        tipology:
          $ref: '#/components/schemas/RgdmType'
        vendor:
          type: string
        model:
          type: string
        statuses:
          type: array
          items:
            $ref: '#/components/schemas/Status'
        phases:
          type: array
          items:
            $ref: '#/components/schemas/Measure'
    RgdmAction:
      type: string
      enum:
      - remoteTrip
      - remoteClose
    NetStmStats:
      properties:
        defaultServer:
          type: integer
          format: int32
          default: 1
        servers:
          type: array
          items:
            $ref: '#/components/schemas/NetStmServer'
    NetStmServer:
      properties:
        id:
          type: integer
          format: int32
        name:
          type: string
        host:
          type: string
          description: the server ip
        netInterface:
          type: string
        status:
          $ref: '#/components/schemas/StmStatus'
    NetStmServerDetail:
      properties:
        id:
          type: integer
          format: int32
        name:
          type: string
        host:
          type: string
        netInterface:
          type: string
        status:
          $ref: '#/components/schemas/StmStatus'
    StmStatus:
      type: object
      properties:
        ts:
          type: integer
          format: int64
        ping:
          type: boolean
    NetStmConnection:
      type: object
      properties:
        id:
          type: integer
          format: int64
        commonAddress:
          type: integer
          format: int64
        startConnectionTs:
          type: integer
          format: int64
        rxLastMessageTs:
          type: integer
          format: int64
        txLastMessageTs:
          type: integer
          format: int64
        serverId:
          type: string
        serverName:
          type: string
    UP:
      type: object
      properties:
        id:
          type: integer
          format: int64
        info:
          type: string
        alarm:
          type: string
        configuration:
          $ref: '#/components/schemas/Setup'
    Setup:
      type: object
      properties:
        alarmChannel:
          type: string
          description: channel to retrieve the alarm in real time
        measurementChannel:
          type: string
          description: channel to retrieve the measures in real time
        GOOSE:
          $ref: '#/components/schemas/GOOSE'
        Network:
          $ref: '#/components/schemas/Network'
    GOOSE:
      type: object
      properties:
        routing:
          type: string
        macAddress:
          type: string
        repetitionInterval:
          type: string
        netInterface:
          type: string
        bpfFilter:
          type: string
    Network:
      type: object
      properties:
        networkInterfaces:
          type: array
          items:
            $ref: '#/components/schemas/NetworkInterface'
    NetworkInterface:
      type: object
      properties:
        name:
          type: string
          description: ETH0, ETH1, WLAN0
        status:
          type: string
        configure:
          type: string
        ipAddress:
          type: string
        subnetMask:
          type: string
        gateway:
          type: string
        dnsServers:
          type: string
    ErrorMessage:
      type: object
      properties:
        errorCode:
          type: string
        errorMessage:
          type: string
    ErrorResponse:
      properties:
        payload:
          $ref: '#/components/schemas/ErrorMessage'
      allOf:
      - $ref: '#/components/schemas/ApiResponse'
      - type: object
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        payload:
          type: object
          properties: {}
    ApiListResponse:
      properties:
        payload:
          $ref: '#/components/schemas/ApiListResponse_payload'
      allOf:
      - $ref: '#/components/schemas/ApiResponse'
      - type: object
    OdmResponse:
      properties:
        payload:
          discriminator:
            propertyName: tipology
            mapping:
              bt: '#/components/schemas/OdmBTDetail'
              mt: '#/components/schemas/OdmMTDetail'
          oneOf:
          - $ref: '#/components/schemas/OdmBTDetail'
          - $ref: '#/components/schemas/OdmMTDetail'
      allOf:
      - $ref: '#/components/schemas/ApiResponse'
      - type: object
    OdmListResponse:
      properties:
        payload:
          $ref: '#/components/schemas/OdmListResponse_payload'
      allOf:
      - $ref: '#/components/schemas/ApiListResponse'
      - type: object
    RgdmResponse:
      properties:
        payload:
          $ref: '#/components/schemas/RgdmDetail'
      allOf:
      - $ref: '#/components/schemas/ApiResponse'
      - type: object
    RgdmListResponse:
      properties:
        payload:
          $ref: '#/components/schemas/RgdmListResponse_payload'
      allOf:
      - $ref: '#/components/schemas/ApiListResponse'
      - type: object
    NetStmStatsResponse:
      properties:
        payload:
          $ref: '#/components/schemas/NetStmStats'
      allOf:
      - $ref: '#/components/schemas/ApiResponse'
      - type: object
    NetStmServerResponse:
      properties:
        payload:
          $ref: '#/components/schemas/NetStmServerDetail'
      allOf:
      - $ref: '#/components/schemas/ApiResponse'
      - type: object
    NetStmConnectionListResponse:
      properties:
        payload:
          $ref: '#/components/schemas/NetStmConnectionListResponse_payload'
      allOf:
      - $ref: '#/components/schemas/ApiListResponse'
      - type: object
    OdmRequest:
      required:
      - id
      - modelName
      - tipology
      - vendorName
      type: object
      properties:
        id:
          type: string
        tipology:
          $ref: '#/components/schemas/Domain'
        modelName:
          type: string
        vendorName:
          type: string
        address:
          type: string
        serialPort:
          type: string
          description: for BT
    RgdmRequest:
      required:
      - id
      - modelName
      - tipology
      - vendorName
      type: object
      properties:
        id:
          type: string
        tipology:
          $ref: '#/components/schemas/RgdmType'
        modelName:
          type: string
        vendorName:
          type: string
    NetStmServerRequest:
      type: object
      properties:
        name:
          type: string
        host:
          type: string
          description: the server ip
        netInterface:
          type: string
        defaultServer:
          type: boolean
    ApiListResponse_payload:
      type: object
      properties:
        pageNum:
          type: integer
          description: page num; -1 means no pagination
          default: -1
        pageLimit:
          type: integer
          description: data pageLimit (num of items) in page; -1 means no pageLimit
          default: -1
        size:
          type: integer
          description: the total number of the items
        items:
          type: array
          description: the subset of items retrieved according to the pageNum and
            pageLimit specified
          items:
            type: object
    OdmListResponse_payload:
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/Odm'
    RgdmListResponse_payload:
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/Rgdm'
    NetStmConnectionListResponse_payload:
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/NetStmConnection'
  parameters:
    pageNum:
      name: pageNum
      in: query
      description: The page number of items to collect; this means that the offset
        of items to skip is (pageNum - 1) * pageLimit; a negative or 0 offset means
        no pagination.
      required: false
      style: form
      explode: true
      schema:
        type: integer
    pageLimit:
      name: pageLimit
      in: query
      description: The numbers of items to return in the page; a negative limit means
        no limit.
      required: false
      style: form
      explode: true
      schema:
        type: integer
        default: -1
  examples:
    odmListResponseExample1:
      value: |-
        {
          "code": 200,
          "payload": {
            "pageNum": 1,
            "pageLimit": -1,
            "size": 2,
            "items": [
              {
                "id": 1,
                "name": "ODM1",
                "tipology": "bt",
                "vendorName": "BTICINO",
                "modelName": "A500",
                "enabled": true,
                "statuses": [
                  {
                    "ts": 123456789,
                    "name": "breaker",
                    "type": "integer",
                    "value": 1
                  },
                  {
                    "ts": 123456789,
                    "name": "automa",
                    "type": "boolean",
                    "value": true
                  }
                ],
                "phases": [
                  {
                    "ts": 123456789,
                    "name": "current_P1",
                    "type": "integer",
                    "value": 10
                  },
                  {
                    "ts": 123456789,
                    "name": "voltage_P1",
                    "type": "integer",
                    "value": -5
                  },
                  {
                    "ts": 123456789,
                    "name": "current_P2",
                    "type": "integer",
                    "value": -5
                  },
                  {
                    "ts": 123456789,
                    "name": "voltage_P2",
                    "type": "integer",
                    "value": -5
                  },
                  {
                    "ts": 123456789,
                    "name": "current_P3",
                    "type": "integer",
                    "value": -5
                  },
                  {
                    "ts": 123456789,
                    "name": "voltage_P3",
                    "type": "integer",
                    "value": -5
                  }
                ]
              },
              {
                "id": 2,
                "name": "ODM2",
                "tipology": "mt",
                "vendorName": "BTICINO",
                "modelName": "A500",
                "enabled": false,
                "statuses": [
                  {
                    "ts": 123456789,
                    "name": "breaker",
                    "type": "integer",
                    "value": 0
                  },
                  {
                    "ts": 123456789,
                    "name": "automa",
                    "type": "boolean",
                    "value": false
                  }
                ],
                "phases": [
                  {
                    "ts": 123456789,
                    "name": "current_P1",
                    "type": "integer",
                    "value": 0
                  },
                  {
                    "ts": 123456789,
                    "name": "voltage_P1",
                    "type": "integer",
                    "value": 0
                  },
                  {
                    "ts": 123456789,
                    "name": "current_P2",
                    "type": "integer",
                    "value": 0
                  },
                  {
                    "ts": 123456789,
                    "name": "voltage_P2",
                    "type": "integer",
                    "value": 0
                  },
                  {
                    "ts": 123456789,
                    "name": "current_P3",
                    "type": "integer",
                    "value": 0
                  },
                  {
                    "ts": 123456789,
                    "name": "voltage_P3",
                    "type": "integer",
                    "value": 0
                  }
                ]
              }
            ]
          }
        }
    odmResponseExample1:
      value: "{\n    \"code\": 200,\n    \"payload\": [\n        {\n            \"\
        id\": 1, \n            \"name\": \"ODM1\",\n            \"tipology\": \"bt\"\
        ,\n            \"vendorName\": \"BTICINO\",\n            \"modelName\": \"\
        A500\", \n            \"enabled\": \"true\", \n            \"alarmChannel\"\
        : \"ws://34.90.62.54/alarms/odms/ODM1\",\n            \"measurementChannel\"\
        : \"ws://34.90.62.54/measures/odms/ODM1\",\n            \"measurements\":\
        \ [\n                {\n                    \"ts\": 123456789, \n        \
        \            \"name\": \"currentP1\",\n                    \"type\": \"integer\"\
        ,\n                    \"value\": \"10\"\n                },\n           \
        \     {\n                    \"ts\": 123456789, \n                    \"name\"\
        : \"voltageP1\",\n                    \"type\": \"integer\",\n           \
        \         \"value\": \"-5\"\n                },\n                {\n     \
        \               \"ts\": 123456789, \n                    \"name\": \"currentP2\"\
        ,\n                    \"type\": \"integer\",\n                    \"value\"\
        : \"-5\"\n                },\n                {\n                    \"ts\"\
        : 123456789, \n                    \"name\": \"voltageP2\",\n            \
        \        \"type\": \"integer\",\n                    \"value\": \"-5\"\n \
        \               },\n                {\n                    \"ts\": 123456789,\
        \ \n                    \"name\": \"currentP3\",\n                    \"type\"\
        : \"integer\",\n                    \"value\": \"-5\"\n                },\n\
        \                {\n                    \"ts\": 123456789, \n            \
        \        \"name\": \"voltageP3\",\n                    \"type\": \"integer\"\
        ,\n                    \"value\": \"-5\"\n                }\n            ],\n\
        \            \"statuses\": [\n                {\n                    \"ts\"\
        : 123456789, \n                    \"name\": \"breaker\",\n              \
        \      \"type\": \"integer\",\n                    \"value\": \"1\"\n    \
        \            }\n            ]\n        }\n    ]\n}"
    rgdmListResponseExample1:
      value: |-
        {
          "code": 200,
          "payload": {
            "pageNum": 1,
            "pageLimit": -1,
            "size": 2,
            "items": [
              {
                "id": 1,
                "name": "RGDM1",
                "tipology": "RGDAT",
                "vendorName": "ENEL",
                "modelName": "A500",
                "enabled": true,
                "statuses": [
                  {
                    "ts": 123456789,
                    "name": "protection",
                    "type": "boolean",
                    "value": true
                  },
                  {
                    "ts": 123456789,
                    "name": "automa",
                    "type": "boolean",
                    "value": true
                  }
                ],
                "phases": [
                  {
                    "ts": 123456789,
                    "name": "current_P1",
                    "type": "integer",
                    "value": 10
                  },
                  {
                    "ts": 123456789,
                    "name": "voltage_P1",
                    "type": "integer",
                    "value": -5
                  },
                  {
                    "ts": 123456789,
                    "name": "current_P2",
                    "type": "integer",
                    "value": -5
                  },
                  {
                    "ts": 123456789,
                    "name": "voltage_P2",
                    "type": "integer",
                    "value": -5
                  },
                  {
                    "ts": 123456789,
                    "name": "current_P3",
                    "type": "integer",
                    "value": -5
                  },
                  {
                    "ts": 123456789,
                    "name": "voltage_P3",
                    "type": "integer",
                    "value": -5
                  }
                ]
              },
              {
                "id": 2,
                "name": "RGDM2",
                "tipology": "RGDM",
                "vendorName": "ENEL",
                "modelName": "A500",
                "enabled": false,
                "statuses": [
                  {
                    "ts": 123456789,
                    "name": "protection",
                    "type": "boolean",
                    "value": false
                  },
                  {
                    "ts": 123456789,
                    "name": "automa",
                    "type": "boolean",
                    "value": false
                  }
                ],
                "phases": [
                  {
                    "ts": 123456789,
                    "name": "current_P1",
                    "type": "integer",
                    "value": 0
                  },
                  {
                    "ts": 123456789,
                    "name": "voltage_P1",
                    "type": "integer",
                    "value": 0
                  },
                  {
                    "ts": 123456789,
                    "name": "current_P2",
                    "type": "integer",
                    "value": 0
                  },
                  {
                    "ts": 123456789,
                    "name": "voltage_P2",
                    "type": "integer",
                    "value": 0
                  },
                  {
                    "ts": 123456789,
                    "name": "current_P3",
                    "type": "integer",
                    "value": 0
                  },
                  {
                    "ts": 123456789,
                    "name": "voltage_P3",
                    "type": "integer",
                    "value": 0
                  }
                ]
              }
            ]
          }
        }
    rgdmResponseExample1:
      value: "{\n  \"code\": 200,\n  \"payload\": {\n    \"id\": \"1\",\n    \"name\"\
        : \"RGDM 1\",\n    \"tipology\": \"RGDAT\",\n    \"modelId\": \"1\",\n   \
        \ \"modelName\": \"A500\",\n    \"vendorName\": \"ENEL\",\n    \"enabled\"\
        : true,\n    \"statuses\": [\n        {\n            \"ts\": 123456789, \n\
        \            \"name\": \"protection\",\n            \"type\": \"boolean\"\
        ,\n            \"value\": \"true\"\n        },\n        {\n            \"\
        ts\": 123456789, \n            \"name\": \"automa\",\n            \"type\"\
        : \"boolean\",\n            \"value\": \"true\"\n        }\n    ],\n    \"\
        measurementChannel\": \"mqtt://34.90.62.54/vkura01/RGDM1/measures\",\n   \
        \ \"measurements\": [\n                {\n                    \"ts\": 123456789,\
        \ \n                    \"name\": \"currentP1\",\n                    \"type\"\
        : \"integer\",\n                    \"value\": \"10\"\n                },\n\
        \                {\n                    \"ts\": 123456789, \n            \
        \        \"name\": \"voltageP1\",\n                    \"type\": \"integer\"\
        ,\n                    \"value\": \"-5\"\n                },\n           \
        \     {\n                    \"ts\": 123456789, \n                    \"name\"\
        : \"currentP2\",\n                    \"type\": \"integer\",\n           \
        \         \"value\": \"-5\"\n                },\n                {\n     \
        \               \"ts\": 123456789, \n                    \"name\": \"voltageP2\"\
        ,\n                    \"type\": \"integer\",\n                    \"value\"\
        : \"-5\"\n                },\n                {\n                    \"ts\"\
        : 123456789, \n                    \"name\": \"currentP3\",\n            \
        \        \"type\": \"integer\",\n                    \"value\": \"-5\"\n \
        \               },\n                {\n                    \"ts\": 123456789,\
        \ \n                    \"name\": \"voltageP3\",\n                    \"type\"\
        : \"integer\",\n                    \"value\": \"-5\"\n                }\n\
        \            ],\n    \"statuses\": [\n                {\n                \
        \    \"ts\": 123456789, \n                    \"name\": \"breaker\",\n   \
        \                 \"type\": \"integer\",\n                    \"value\": \"\
        1\"\n                }\n            ]\n    }\n}"
    netStmStatsExample:
      value: |-
        {
          "code": 200,
          "payload": {
            "default": 1,
            "servers": [
              {
                "id": 1,
                "name": "STM 1",
                "host": "192.144.144.141",
                "netInterface": "eth0",
                "status": {
                  "ts": 123456789,
                  "ping": true
                }
              },
              {
                "id": 2,
                "name": "STM 2",
                "host": "192.144.144.142",
                "netInterface": "eth0",
                "status": {
                  "ts": 123456789,
                  "ping": true
                }
              }
            ]
          }
        }
    netStmServerExample:
      value: |-
        {
          "code": 200,
          "payload": {
            "id": 1,
            "name": "STM 1",
            "host": "192.144.144.141",
            "netInterface": "eth0",
            "status": {
              "ts": 123456789,
              "ping": true
            }
          }
        }
    netStmConnectionListExample:
      value: |-
        {
          "code": 200,
          "payload": {
          "pageNum": 1,
          "pageLimit": -1,
          "size": 2,
          "items": [
                {
                 "id": "7987984-1",
                "commonAddress": 7987984,
                "startConnectionTs": 1590158556,
                "rxLastMessageTs": 159015988,
                "txLastMessageTs": 159015988,
                "serverId": 1,
                "serverName": "STM 1"
               },
               {
                "id": "3487984-1",
                "commonAddress": 3487984,
                "startConnectionTs": 1590158556,
                "rxLastMessageTs": 159015988,
                "txLastMessageTs": 159015988,
                "serverId": 1,
                "serverName": "STM 1"
                }
            ]
          }
        }
    networkRequestExample:
      value: |-
        [
          {
            "networkInterfaces": [
              {
               "name": "ETH0",
               "status": "192.000.000.00",
               "configure": "192.000.000.00",
               "ipAddress": "192.000.000.00",
               "subnetMask": "255.000.000.00",
               "gateway": "190.00.00.000",
                "dnsServers": "0.0.0.0"
              }
            ]
          }
        ]
    gooseSettingsExample:
      value: |-
        {
          "routing": "string",
          "macAddress": "string",
          "repetitionInterval": "string",
          "netInterface": "string",
          "bpfFilter": "string"
        }
    apiResponseOK:
      value: '{"code":200, "payload": {"message":"SUCCESS"}}'
