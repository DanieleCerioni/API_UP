openapi: 3.0.0
info:
  title: API UP ACEA
  description: '-----'
  version: 1.0.0
servers:
- url: https://virtserver.swaggerhub.com/gtaffon/SimpleAPI/1.0.0
  description: SwaggerHub API Auto Mocking
tags:
- name: ODM
  description: All the info about the ODM
- name: RGDM
  description: All the info's about the RGDM
- name: UP
  description: All the info about the UP
paths:
  /up/stm:
    get:
      tags:
      - UP
      summary: return the connection stats with the stm
      description: return the actual connection stats with the stm
      operationId: callStm
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NetStm'
        "404":
          description: Not found
          content: {}
  /up/stm/connection:
    get:
      tags:
      - UP
      summary: return the status of the active connection with the stm
      description: return the status of the active connection with the stm
      operationId: calledStm
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NetStmConnection'
        "404":
          description: Not found
          content: {}
  /up/odms:
    get:
      tags:
      - ODM
      summary: return the list of the connected odms
      description: return the full list of the connected odms with the relative properties
      operationId: getAllOdm
      parameters:
      - name: offset
        in: query
        description: The number of items to skip before starting to collect the result
          set.
        required: false
        style: form
        explode: true
        schema:
          minimum: 0
          type: integer
      - name: limit
        in: query
        description: The numbers of items to return.
        required: false
        style: form
        explode: true
        schema:
          maximum: 50
          minimum: 1
          type: integer
          default: 20
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OdmListResponse'
              examples:
                ex1:
                  $ref: '#/components/examples/odmListResponse1'
    post:
      tags:
      - ODM
      summary: add an odm to the system
      description: add a single odm with the parameters added in input
      operationId: addOdm
      requestBody:
        description: add an odm to the platform
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Odm'
      responses:
        "200":
          description: Successful Input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
              examples:
                ok:
                  $ref: '#/components/examples/apiResponseOK'
        "405":
          description: Invalid input
          content: {}
      x-codegen-request-body-name: body
  /up/odms/{idOdm}:
    get:
      tags:
      - ODM
      summary: return the statistics fot the single odm
      description: return the statistics fot the single odm
      operationId: getOdm
      parameters:
      - name: idOdm
        in: path
        description: ID of odm to return
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OdmResponse'
              examples:
                ex1:
                  $ref: '#/components/examples/odmResponse1'
        "400":
          description: Invalid ID supplied
          content: {}
        "404":
          description: Odm not found
          content: {}
      x-codegen-request-body-name: body
    delete:
      tags:
      - ODM
      summary: remove an odm
      description: remove the selected odm from the system
      operationId: delOdm
      parameters:
      - name: idOdm
        in: path
        description: ID of odm to return
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: Successful Input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
              examples:
                ok:
                  $ref: '#/components/examples/apiResponseOK'
        "405":
          description: Invalid input
          content: {}
    x-codegen-request-body-name: body
  /up-simulator/odms/{idOdm}:
    put:
      tags:
      - UP
      summary: Simulate current and voltage for the selected Odm
      description: Set the parameters to simulate the current and voltage for a specific
        odm
      operationId: simulOdm
      parameters:
      - name: domain
        in: path
        description: ID of odm to return
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/Domain'
      - name: idOdm
        in: path
        description: id of the odm
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: send the value for the simulation
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/Phase'
        required: true
      responses:
        "200":
          description: Successful Input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
              examples:
                ok:
                  $ref: '#/components/examples/apiResponseOK'
        "400":
          description: invalid data
          content: {}
        "404":
          description: odm not found
          content: {}
        "405":
          description: Invalid input
          content: {}
    post:
      tags:
      - UP
      summary: commands to send to the breaker
      operationId: sendCommand
      parameters:
      - name: domain
        in: path
        description: ID of odm to return
        required: true
        style: simple
        explode: false
        schema:
          $ref: '#/components/schemas/Domain'
      - name: idOdm
        in: path
        description: ID of odm to return
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      requestBody:
        description: send the open,close,reset command to the up
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Command'
        required: true
      responses:
        "200":
          description: Successful Input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
              examples:
                ok:
                  $ref: '#/components/examples/apiResponseOK'
        "405":
          description: Invalid input
          content: {}
  /rgdms:
    get:
      tags:
      - RGDM
      summary: returns all the rgdm attached to the system
      operationId: getAllRgdm
      parameters:
      - name: offset
        in: query
        description: The number of items to skip before starting to collect the result
          set.
        required: false
        style: form
        explode: true
        schema:
          minimum: 0
          type: integer
      - name: limit
        in: query
        description: The numbers of items to return.
        required: false
        style: form
        explode: true
        schema:
          maximum: 50
          minimum: 1
          type: integer
          default: 20
      responses:
        "200":
          description: Successfull Input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RgdmListResponse'
              examples:
                ok:
                  $ref: '#/components/examples/rgdmListResponse1'
    post:
      tags:
      - RGDM
      summary: add an rgdm to the system
      operationId: addRgdm
      requestBody:
        description: add an RGDM to the platform
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Rgdm'
      responses:
        "200":
          description: Successful Input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
              examples:
                ok:
                  $ref: '#/components/examples/apiResponseOK'
        "405":
          description: Invalid input
          content: {}
  /rgdms/{idRgdm}:
    get:
      tags:
      - RGDM
      summary: return the info for the selected rgdm
      description: return the info for the selected rgdm
      operationId: getRgdm
      parameters:
      - name: idRgdm
        in: path
        description: ID of rgdm to return
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RgdmResponse'
              examples:
                ex1:
                  $ref: '#/components/examples/rgdmResponse1'
        "400":
          description: Invalid ID supplied
          content: {}
        "404":
          description: Rgdm not found
          content: {}
    post:
      tags:
      - RGDM
      summary: simulate the send of the command
      description: simulate the send of the command on a specific rgdm in the domain
        of the medium or low voltage
      operationId: sendCommandRgdm
      parameters:
      - name: idRgdm
        in: path
        description: ID of rgdm to return
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      requestBody:
        description: send the seguent command to the rgdm
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RgdmAction'
      responses:
        "200":
          description: Successful Input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
              examples:
                ok:
                  $ref: '#/components/examples/apiResponseOK'
        "405":
          description: Invalid input
          content: {}
    delete:
      tags:
      - RGDM
      summary: delete the selected rgdm by id from the system
      description: delete the selected rgdm by the system
      operationId: delRgdm
      parameters:
      - name: idRgdm
        in: path
        description: ID of rgdm to return
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: Successful Input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse'
              examples:
                ok:
                  $ref: '#/components/examples/apiResponseOK'
        "400":
          description: Invalid ID
          content: {}
        "404":
          description: Rgdm not found
          content: {}
        "405":
          description: Invalid input
          content: {}
components:
  schemas:
    RgdmType:
      type: string
      enum:
      - RGDAT
      - RGDM
    Domain:
      type: string
      enum:
      - bt
      - mt
    OdmStatus:
      type: object
      properties:
        ts:
          type: integer
          description: timestamp (long int)
          format: int32
        breaker:
          type: integer
          description: short int (aperto, chiuso, blocco stabile)
        automa:
          type: boolean
    RgdmStatus:
      type: object
      properties:
        ts:
          type: integer
          description: timestamp (long int)
          format: int32
        protection:
          type: integer
          format: int32
        automi:
          type: boolean
          description: enabled/disabled
    RgdmMeasurements:
      type: object
      properties:
        ts:
          type: integer
          description: timestamp (long int)
          format: int32
        phases:
          type: array
          items:
            $ref: '#/components/schemas/PhaseRgdm'
    OdmMeasurement:
      type: object
      properties:
        ts:
          type: integer
          description: timestamp (long int)
          format: int32
        phases:
          type: array
          items:
            $ref: '#/components/schemas/Phase'
    Phase:
      type: object
      properties:
        name:
          type: string
          enum:
          - P1
          - P2
          - P3
        current:
          type: integer
          format: int32
          default: 0
        voltage:
          type: integer
          format: int32
          default: 0
    PhaseRgdm:
      type: object
      properties:
        name:
          type: string
          enum:
          - P1
          - P2
          - P3
        current:
          type: integer
          format: int32
          default: 0
        voltage:
          type: integer
          format: int32
          default: 0
    OdmDetail:
      required:
      - modelName
      - name
      - tipology
      - vendorName
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        tipology:
          $ref: '#/components/schemas/Domain'
        modelId:
          type: string
        modelName:
          type: string
        vendorName:
          type: string
        enabled:
          type: boolean
        status:
          $ref: '#/components/schemas/OdmStatus'
        alarmChannel:
          type: string
          description: channel to retrieve the alarm in real time
        measurementChannel:
          type: string
          description: channel to retrieve the data in real time
        measurement:
          $ref: '#/components/schemas/OdmMeasurement'
    RgdmDetail:
      required:
      - modelName
      - name
      - tipology
      - vendorName
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        tipology:
          type: string
        modelId:
          type: string
        modelName:
          type: string
        vendorName:
          type: string
        enabled:
          type: boolean
        status:
          $ref: '#/components/schemas/RgdmStatus'
        measurement:
          $ref: '#/components/schemas/RgdmMeasurements'
    OdmMTDetail:
      properties:
        physicalAddress:
          type: integer
          description: short int
          format: int8
      description: cable config settings
      allOf:
      - $ref: '#/components/schemas/OdmDetail'
      - type: object
    OdmBTDetail:
      properties:
        serialPort:
          type: string
      description: modbus config settings
      allOf:
      - $ref: '#/components/schemas/OdmDetail'
      - type: object
    OdmRequest:
      required:
      - id
      - modelName
      - tipology
      - vendorName
      type: object
      properties:
        id:
          type: string
        tipology:
          type: string
        modelName:
          type: string
        vendorName:
          type: string
    RgdmRequest:
      required:
      - id
      - modelName
      - tipology
      - vendorName
      type: object
      properties:
        id:
          type: string
        tipology:
          type: string
        modelName:
          type: string
        vendorName:
          type: string
    Odm:
      required:
      - modelName
      - name
      - tipology
      - vendorName
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        tipology:
          $ref: '#/components/schemas/Domain'
        modelName:
          type: string
        vendorName:
          type: string
        enabled:
          type: boolean
        status:
          $ref: '#/components/schemas/OdmStatus'
        phases:
          type: array
          items:
            $ref: '#/components/schemas/Phase'
      description: odm light infos
    Rgdm:
      type: object
      properties:
        id:
          type: integer
          format: int64
        identifier:
          type: string
        tipology:
          type: string
        vendor:
          type: string
        model:
          type: string
        actualStatus:
          type: string
          description: stato odm
          enum:
          - "ON"
          - "OFF"
          - DISCONNECTED
        statusAlarms:
          type: string
        statusProtection:
          type: string
        phases:
          type: array
          items:
            $ref: '#/components/schemas/Phase'
    RgdmAction:
      type: object
      properties:
        remoteTrip:
          type: string
        remoteClose:
          type: string
    NetStm:
      type: object
      properties:
        id:
          type: string
        ip:
          type: string
    NetStmConnection:
      type: object
      properties:
        ActiveConnection:
          type: string
        ConnectionStatus:
          type: string
    UP:
      type: object
      properties:
        id:
          type: integer
          format: int64
        info:
          type: string
        alarm:
          type: string
        configuration:
          $ref: '#/components/schemas/Setup'
    Setup:
      type: object
      properties:
        alarmChannel:
          type: string
          description: channel to retrieve the alarm in real time
        measurementChannel:
          type: string
          description: channel to retrieve the measures in real time
        STM:
          $ref: '#/components/schemas/STM'
        GOOSE:
          $ref: '#/components/schemas/GOOSE'
        Network:
          $ref: '#/components/schemas/Network'
    STM:
      type: object
      properties:
        firstIp:
          type: string
        secondIp:
          type: string
        netInteface:
          type: string
    GOOSE:
      type: object
      properties:
        routing:
          type: string
        macAddress:
          type: string
        repetitionInterval:
          type: string
        netInterface:
          type: string
        bpfFilter:
          type: string
    Network:
      type: object
      properties:
        networkInterfaces:
          type: array
          items:
            $ref: '#/components/schemas/NetworkInterface'
    NetworkInterface:
      type: object
      properties:
        name:
          type: string
          description: ETH0, ETH1, WLAN0
        status:
          type: string
        configure:
          type: string
        ipAddress:
          type: string
        subnetMask:
          type: string
        gateway:
          type: string
        dnsServers:
          type: string
    Command:
      type: object
      properties:
        open:
          type: string
        close:
          type: string
        reset:
          type: string
    ErrorMessage:
      type: object
      properties:
        errorCode:
          type: string
        errorMessage:
          type: string
    ErrorResponse:
      properties:
        payload:
          $ref: '#/components/schemas/ErrorMessage'
      allOf:
      - $ref: '#/components/schemas/ApiResponse'
      - type: object
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        payload:
          type: object
          properties: {}
    ApiListResponse:
      properties:
        payload:
          $ref: '#/components/schemas/ApiListResponse_payload'
      allOf:
      - $ref: '#/components/schemas/ApiResponse'
      - type: object
    OdmResponse:
      properties:
        payload:
          discriminator:
            propertyName: tipology
            mapping:
              bt: '#/components/schemas/OdmBTDetail'
              mt: '#/components/schemas/OdmMTDetail'
          oneOf:
          - $ref: '#/components/schemas/OdmBTDetail'
          - $ref: '#/components/schemas/OdmMTDetail'
      allOf:
      - $ref: '#/components/schemas/ApiResponse'
      - type: object
    OdmListResponse:
      properties:
        payload:
          $ref: '#/components/schemas/OdmListResponse_payload'
      allOf:
      - $ref: '#/components/schemas/ApiListResponse'
      - type: object
    RgdmResponse:
      properties:
        payload:
          $ref: '#/components/schemas/RgdmResponse'
      allOf:
      - $ref: '#/components/schemas/ApiResponse'
      - type: object
    RgdmListResponse:
      properties:
        payload:
          $ref: '#/components/schemas/RgdmListResponse'
      allOf:
      - $ref: '#/components/schemas/ApiResponse'
      - type: object
    ApiListResponse_payload:
      type: object
      properties:
        offset:
          type: integer
          description: data offset (page num); -1 means no offset
          default: -1
        limit:
          type: integer
          description: data limit (num of items); -1 means no limit
          default: -1
        items:
          type: array
          items:
            type: object
    OdmListResponse_payload:
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/Odm'
  parameters:
    offset:
      name: offset
      in: query
      description: The number of items to skip before starting to collect the result
        set.
      required: false
      style: form
      explode: true
      schema:
        minimum: 0
        type: integer
    limit:
      name: limit
      in: query
      description: The numbers of items to return.
      required: false
      style: form
      explode: true
      schema:
        maximum: 50
        minimum: 1
        type: integer
        default: 20
  examples:
    odmResponse1:
      value: "{\n    \"code\": 200,\n    \"payload\": [\n        {\n            \"\
        id\": 1, \n            \"name\": \"ODM1\",\n            \"tipology\": \"bt\"\
        ,\n            \"vendorName\": \"BTICINO\",\n            \"modelName\": \"\
        A500\", \n            \"enabled\": \"true\", \n            \"status\": {\n\
        \                \"ts\": 123456789,\n                \"breaker\": 0\n    \
        \        },\n            \"measurement\": {\n                \"ts\": 123456789,\n\
        \                \"phases\": [\n                    {\n                  \
        \      \"name\": \"P1\",\n                        \"current\": 10,\n     \
        \                   \"voltage\": 10\n                    },\n            \
        \        {\n                        \"name\": \"P2\",\n                  \
        \      \"current\": -5,\n                        \"voltage\": -5\n       \
        \             },\n                    {\n                        \"name\"\
        : \"P3\",\n                        \"current\": -5,\n                    \
        \    \"voltage\": -5\n                    }\n                ]\n         \
        \   }\n        }\n    ]\n}"
    odmListResponse1:
      value: "{\n  \"code\": 200,\n  \"payload\": \n      {\"offset\": 0,\n      \"\
        limit\": 1,\n      \"items\":[\n          {\n              \"id\": 1, \n \
        \             \"name\": \"ODM1\", \n              \"tipology\": \"bt\", \n\
        \              \"vendorName\": \"BTICINO\", \n              \"modelName\"\
        : \"A500\", \n              \"enabled\": \"true\", \n              \"status\"\
        : {\n                  \"ts\": 123456789, \n                  \"breaker\"\
        : 0, \n                  \"automa\": false \n              },\n          \
        \    \"phases\": [\n                  {\n                      \"name\": \"\
        P1\",\n                      \"current\": 10,\n                      \"voltage\"\
        : 10\n                  },\n                  {\n                      \"\
        name\": \"P2\",\n                      \"current\": -5,\n                \
        \      \"voltage\": -5\n                  },\n                  {\n      \
        \                \"name\": \"P3\",\n                      \"current\": -5,\n\
        \                      \"voltage\": -5\n                  }\n            \
        \  ]\n          }\n      ]\n  }\n}"
    rgdmListResponse1:
      value: "{\n    \"code\": 200,\n    \"payload\": \n        {\"offset\": 0,\n\
        \        \"limit\": 1,\n        \"items\":[\n            {\n             \
        \   \"id\": 1, \n                \"name\": \"RGDM1\", \n                \"\
        tipology\": \"RGDAT\", \n                \"vendorName\": \"ENEL\", \n    \
        \            \"modelName\": \"A500\", \n                \"enabled\": \"true\"\
        , \n                \"status\": {\n                    \"ts\": 123456789,\
        \ \n                    \"protection\": 0, \n                    \"automa\"\
        : false \n                },\n                \"phases\": [\n            \
        \        {\n                        \"name\": \"P1\",\n                  \
        \      \"current\": 10,\n                        \"voltage\": 10\n       \
        \             },\n                    {\n                        \"name\"\
        : \"P2\",\n                        \"current\": -5,\n                    \
        \    \"voltage\": -5\n                    },\n                    {\n    \
        \                    \"name\": \"P3\",\n                        \"current\"\
        : -5,\n                        \"voltage\": -5\n                    }\n  \
        \              ]\n            }\n        ]\n    }\n}"
    rgdmResponse1:
      value: '{"code":200, "payload": { "id": 1, "identifier": "RGDM 1", "tipology":
        "", "vendor": "ENNEBI", "model": "A500", "actualStatus": "ON", "statusAlarms":"ON",
        "statusProtection":"ON", "phases": [ { "name": "P1", "current": 10, "voltage":
        10 }, { "name": "P2", "current": -5, "voltage": -5 }, { "name": "P3", "current":
        -5, "voltage": -5 } ] } }'
    apiResponseOK:
      value: '{"code":200, "payload": {"message":"SUCCESS"}}'
